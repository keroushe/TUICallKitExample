# Uncomment the next line to define a global platform for your project
platform :ios, '13.0'

target 'TUICallKitApp' do
  # Comment the next line if you don't want to use dynamic frameworks
  use_frameworks!
  
  pod 'Toast-Swift'
  pod 'Alamofire', '~> 5.6.4'
  pod 'Kingfisher', '<= 6.3.1'
  pod 'SnapKit'
  pod 'TUICallKit-Swift', :path => "../", :subspecs => ["Professional"]
  pod 'TXLiteAVSDK_Professional', '11.8.15669'
  
end

pre_install do |installer|
  $dynamic_frameworks = [
    'Toast-Swift',
    'SnapKit',
    'Kingfisher',
    'Alamofire'
  ]
  installer.pod_targets.each do |pod|
    if $dynamic_frameworks.include?(pod.name)
      puts "Overriding the build_type method for #{pod.name}"
      def pod.build_type;
        # NOTE: This syntax only works in cocoapods >= v1.11. Pre 1.11 BuildType was
        # a simple single value.
        BuildType.new(:linkage => :static, :packaging => :framework)
      end
    end
  end
end

#Pods config
#Fix Xcode14 Bundle target error
post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = ""
      config.build_settings['CODE_SIGNING_REQUIRED'] = "NO"
      config.build_settings['CODE_SIGNING_ALLOWED'] = "NO"
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      
      # 修改配置文件，调整链接库顺序
      if target.name == "Pods-TUICallKitApp"
        # xcconfig文件路径
        xcconfig_path = config.base_configuration_reference.real_path
        # read from xcconfig to build_settings dictionary
        build_settings = Hash[*File.read(xcconfig_path).lines.map{|x| x.split(/\s*=\s*/, 2)}.flatten]
        
        other_ld_flags = build_settings['OTHER_LDFLAGS']
        
        # 将字符串拆分成数组，确保每个标志和它的参数保持在一起
        parts = other_ld_flags.scan(/-?\$\(?\w+\)?|"[^"]+"|-l"[^"]+"|-framework\s+"[^"]+"|-weak_framework\s+"[^"]+"|[^ ]+/)
        parts.pop
        
        puts "Updating #{target.name} old_other_ld_flags: #{parts}"
        
        # 需要放到最后的框架
        frameworks_to_move = [
          '-framework "TUICallKit_Swift"',
          '-framework "TUICore"',
          '-framework "TXFFmpeg"',
          '-framework "TXLiteAVSDK_Professional"'
        ]

        # 过滤出要移动到最后的部分
        remaining_parts = parts - frameworks_to_move
        final_parts = remaining_parts + frameworks_to_move
        new_other_ld_flags = build_settings['OTHER_LDFLAGS'] = final_parts.join(" ")
        
        puts "Updating #{xcconfig_path} \nnew_other_ld_flags: #{new_other_ld_flags}"
        
        File.open(xcconfig_path, "w") {|file| file.puts ""}
        # write build_settings dictionary to xcconfig
        build_settings.each do |key,value|
          File.open(xcconfig_path, "a") {|file| file.puts "#{key} = #{value}"}
        end
        
      end
    end
  end
end
